var Player = (function () {
    function Player(scene, ground) {
        var _this = this;
        this.jumpVelocity = 10;
        this.hitDistance = 0.7;
        this.fallMultiplier = 2.5;
        this.lowJumpMultiplier = 2;
        this.sideLength = 1;
        this.requiredKeys = {
            32: false,
            37: false,
            38: false,
            39: false,
            40: false
        };
        this.scene = scene;
        this.ground = ground;
        this.playerShape = BABYLON.MeshBuilder.CreateBox('player', {
            width: 1,
            height: 1,
            depth: 1
        }, this.scene);
        this.playerShape.position = new BABYLON.Vector3(0, 5, 0);
        this.playerShape.checkCollisions = true;
        this.playerShape.physicsImpostor = new BABYLON.PhysicsImpostor(this.playerShape, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 1 }, this.scene);
        this.playerShape.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());
        window.addEventListener('keydown', function (event) {
            _this.handleKeyDown(event);
        });
        window.addEventListener('keyup', function (event) {
            _this.handleKeyUp(event);
        });
    }
    Player.prototype.handleKeyDown = function (event) {
        var key = event.keyCode;
        if (key in this.requiredKeys) {
            this.requiredKeys[key] = true;
        }
    };
    Player.prototype.handleKeyUp = function (event) {
        var key = event.keyCode;
        if (key in this.requiredKeys) {
            this.requiredKeys[key] = false;
        }
    };
    Player.prototype.vecToLocal = function (vector, mesh) {
        var m = mesh.getWorldMatrix();
        var v = BABYLON.Vector3.TransformCoordinates(vector, m);
        return v;
    };
    Player.prototype.basicJump = function () {
        var ray = new BABYLON.Ray(this.playerShape.position, BABYLON.Vector3.Up().negate(), 10);
        var hit = ray.intersectsMeshes([ground], true);
        if (hit.length)
            if (hit[0].distance <= this.hitDistance && this.requiredKeys[32]) {
                var zVelocity = this.playerShape.physicsImpostor.getLinearVelocity().z;
                this.playerShape.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, this.jumpVelocity, zVelocity));
                this.requiredKeys[32] = false;
            }
    };
    Player.prototype.update = function () {
        this.basicJump();
    };
    return Player;
}());
var canvasHolder = document.getElementById('canvas-holder');
var canvas = document.createElement('canvas');
canvas.width = window.innerWidth - 25;
canvas.height = window.innerHeight - 25;
canvasHolder.appendChild(canvas);
var fpsLabel = document.getElementById('fpsLabel');
var engine = new BABYLON.Engine(canvas, true);
var scene = new BABYLON.Scene(engine);
scene.collisionsEnabled = true;
scene.workerCollisions = true;
scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());
var camera = new BABYLON.FreeCamera("mainCamera", new BABYLON.Vector3(0, 5, -10), scene);
camera.setTarget(BABYLON.Vector3.Zero());
camera.attachControl(canvas, false);
var light = new BABYLON.HemisphericLight("pointLight", new BABYLON.Vector3(5, 7, 5), scene);
light.intensity = 0.7;
var ground = BABYLON.MeshBuilder.CreateGround('ground', {
    width: 10, height: 10, subdivisions: 2
}, scene);
ground.position = BABYLON.Vector3.Zero();
ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.9 }, scene);
ground.isPickable = true;
var player = new Player(scene, ground);
scene.registerBeforeRender(function () {
    player.update();
});
engine.runRenderLoop(function () {
    scene.render();
    fpsLabel.innerHTML = engine.getFps().toFixed() + " fps";
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
