var Player = (function () {
    function Player(scene, ground) {
        var _this = this;
        this.jumpVelocity = 10;
        this.hitDistance = 0.7;
        this.fallMultiplier = 2.5;
        this.lowJumpMultiplier = 2;
        this.moveSpeed = 1;
        this.sideLength = 1;
        this.requiredKeys = {
            32: false,
            37: false,
            38: false,
            39: false,
            40: false
        };
        this.scene = scene;
        this.ground = ground;
        this.playerShape = BABYLON.MeshBuilder.CreateBox('player', {
            width: 1,
            height: 1,
            depth: 1
        }, this.scene);
        this.playerShape.position = new BABYLON.Vector3(0, 5, 0);
        this.playerShape.checkCollisions = true;
        this.playerShape.physicsImpostor = new BABYLON.PhysicsImpostor(this.playerShape, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 1, friction: 0, restitution: 0 }, this.scene);
        this.playerShape.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());
        window.addEventListener('keydown', function (event) {
            event.preventDefault();
            _this.handleKeyDown(event);
        });
        window.addEventListener('keyup', function (event) {
            event.preventDefault();
            _this.handleKeyUp(event);
        });
    }
    Player.prototype.handleKeyDown = function (event) {
        var key = event.keyCode;
        if (key in this.requiredKeys) {
            this.requiredKeys[key] = true;
        }
    };
    Player.prototype.handleKeyUp = function (event) {
        var key = event.keyCode;
        if (key in this.requiredKeys) {
            this.requiredKeys[key] = false;
        }
    };
    Player.prototype.basicJump = function () {
        this.ray = new BABYLON.Ray(this.playerShape.position, BABYLON.Vector3.Up().negate(), 10);
        var hit = this.ray.intersectsMeshes([this.ground], true);
        if (hit.length) {
            if (hit[0].distance <= this.hitDistance && this.requiredKeys[32]) {
                var zVelocity = this.playerShape.physicsImpostor.getLinearVelocity().z;
                this.playerShape.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, this.jumpVelocity, zVelocity));
                this.requiredKeys[32] = false;
            }
        }
    };
    Player.prototype.moveForwardAndBack = function () {
        var moveZ = 0;
        if (this.requiredKeys[38]) {
            moveZ = -1;
        }
        else if (this.requiredKeys[40]) {
            moveZ = 1;
        }
        var moveSpeed = this.moveSpeed * moveZ;
        var yVelocity = this.playerShape.physicsImpostor.getLinearVelocity().y;
        this.playerShape.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, yVelocity, moveSpeed));
    };
    Player.prototype.update = function () {
        this.moveForwardAndBack();
        this.basicJump();
    };
    return Player;
}());
var canvasHolder = document.getElementById('canvas-holder');
var canvas = document.createElement('canvas');
canvas.width = window.innerWidth - 25;
canvas.height = window.innerHeight - 25;
canvasHolder.appendChild(canvas);
var fpsLabel = document.getElementById('fpsLabel');
var engine = new BABYLON.Engine(canvas, true);
var scene = new BABYLON.Scene(engine);
scene.collisionsEnabled = true;
scene.workerCollisions = true;
scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());
var camera = new BABYLON.FollowCamera('mainCamera', new BABYLON.Vector3(0, 0, 0), scene);
camera.heightOffset = 10;
camera.radius = 20;
camera.noRotationConstraint = false;
scene.activeCamera = camera;
var light = new BABYLON.HemisphericLight("pointLight", new BABYLON.Vector3(5, 7, 5), scene);
light.intensity = 0.7;
var ground = BABYLON.MeshBuilder.CreateGround('ground', {
    width: 20, height: 20, subdivisions: 2
}, scene);
ground.position = BABYLON.Vector3.Zero();
ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.9 }, scene);
ground.isPickable = true;
var player = new Player(scene, ground);
camera.lockedTarget = player.playerShape;
scene.registerBeforeRender(function () {
    player.update();
});
engine.runRenderLoop(function () {
    scene.render();
    fpsLabel.innerHTML = engine.getFps().toFixed() + " fps";
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
