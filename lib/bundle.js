'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/// <reference path="./../../typings/babylon.d.ts" />

var Ball = function Ball(scene, spawnPosition, color) {
    _classCallCheck(this, Ball);

    this.ball = BABYLON.MeshBuilder.CreateSphere('playBall', {
        segments: 16,
        diameter: 1
    }, scene);
    this.ball.physicsImpostor = new BABYLON.PhysicsImpostor(this.ball, BABYLON.PhysicsImpostor.SphereImpostor, {
        mass: 1,
        friction: 0,
        restitution: 1
    }, scene);
    this.ball.position = spawnPosition;
    this.ball.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());
    // this.ball.showBoundingBox = true;

    this.initialPosition = spawnPosition.clone();
    this.color = color;
};
/// <reference path="./../../typings/babylon.d.ts" />

var Paddle = function () {
    function Paddle(name, scene, spawnPosition, color) {
        _classCallCheck(this, Paddle);

        this.paddle = BABYLON.MeshBuilder.CreateBox('paddle' + name, {
            width: 5,
            height: 1,
            depth: 1
        }, scene);
        this.paddle.position = spawnPosition;
        this.paddle.physicsImpostor = new BABYLON.PhysicsImpostor(this.paddle, BABYLON.PhysicsImpostor.BoxImpostor, {
            mass: 1,
            friction: 0,
            restitution: 0
        }, scene);
        this.paddle.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());
        this.paddle.showBoundingBox = true;

        this.initialPosition = spawnPosition.clone();
        this.color = color;
        this.movementSpeed = 5;

        this.leftLimit = -14;
        this.rightLimit = 14;
    }

    _createClass(Paddle, [{
        key: 'movePaddle',
        value: function movePaddle(keyStates) {
            if (keyStates[37]) {
                this.paddle.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Left().scale(this.movementSpeed));
            } else if (keyStates[39]) {
                this.paddle.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Right().scale(this.movementSpeed));
            }

            if (!keyStates[37] && !keyStates[39] || keyStates[37] && keyStates[39]) this.paddle.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());

            this.paddle.physicsImpostor.setAngularVelocity(BABYLON.Vector3.Zero());
        }
    }, {
        key: 'update',
        value: function update(keyStates) {
            this.movePaddle(keyStates);
        }
    }]);

    return Paddle;
}();
/// <reference path="./../../typings/babylon.d.ts" />
/// <reference path="./paddle.js" />
/// <reference path="./ball.js" />

var canvasHolder = document.getElementById('canvas-holder');
var canvas = document.createElement('canvas');
canvas.width = window.innerWidth - 25;
canvas.height = window.innerHeight - 30;
canvasHolder.appendChild(canvas);
var engine = new BABYLON.Engine(canvas, true);

var fpsHolder = document.getElementById('fps-label');

var keyStates = {
    32: false, // SPACE
    37: false, // LEFT
    38: false, // TOP
    39: false, // RIGHT
    40: false // DOWN
};
window.addEventListener('keydown', function (event) {
    if (event.keyCode in keyStates) keyStates[event.keyCode] = true;
});
window.addEventListener('keyup', function (event) {
    if (event.keyCode in keyStates) keyStates[event.keyCode] = false;
});

var createScene = function createScene() {
    var scene = new BABYLON.Scene(engine);
    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());
    scene.collisionsEnabled = true;
    scene.workerCollisions = true;

    var camera = new BABYLON.FreeCamera('mainCamera', new BABYLON.Vector3(0, 20, -60), scene);
    camera.setTarget(BABYLON.Vector3.Zero());

    var light = new BABYLON.HemisphericLight('mainLight', new BABYLON.Vector3(0, 1, 0), scene);

    var ground = BABYLON.MeshBuilder.CreateGround('mainGround', {
        width: 32,
        height: 70,
        subdivisions: 2
    }, scene);
    ground.position = BABYLON.Vector3.Zero();
    ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, {
        mass: 0,
        friction: 0,
        restitution: 0
    }, scene);

    var leftBar = BABYLON.MeshBuilder.CreateBox('leftBar', {
        width: 2,
        height: 2,
        depth: 70
    }, scene);
    leftBar.position = new BABYLON.Vector3(-15, 1, 0);
    leftBar.physicsImpostor = new BABYLON.PhysicsImpostor(leftBar, BABYLON.PhysicsImpostor.BoxImpostor, {
        mass: 0,
        friction: 0,
        restitution: 0
    });
    leftBar.showBoundingBox = true;

    var rightBar = BABYLON.MeshBuilder.CreateBox('rightBar', {
        width: 2,
        height: 2,
        depth: 70
    }, scene);
    rightBar.position = new BABYLON.Vector3(15, 1, 0);
    rightBar.physicsImpostor = new BABYLON.PhysicsImpostor(rightBar, BABYLON.PhysicsImpostor.BoxImpostor, {
        mass: 0,
        friction: 0,
        restitution: 0
    });
    rightBar.showBoundingBox = true;

    var testBlocker = BABYLON.MeshBuilder.CreateBox('testBlocker', {
        width: 30,
        height: 1,
        depth: 1
    }, scene);
    testBlocker.position = new BABYLON.Vector3(0, 0.5, 0);
    testBlocker.physicsImpostor = new BABYLON.PhysicsImpostor(testBlocker, BABYLON.PhysicsImpostor.BoxImpostor, {
        mass: 0,
        friction: 0,
        restitution: 1
    });
    testBlocker.showBoundingBox = true;

    return scene;
};
var scene = createScene();

var testPaddle = new Paddle('test', scene, new BABYLON.Vector3(0, 0.5, -34), 5);
var testBall = new Ball(scene, new BABYLON.Vector3(0, 5, 0), 4);

engine.runRenderLoop(function () {
    testPaddle.update(keyStates);
    scene.render();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
